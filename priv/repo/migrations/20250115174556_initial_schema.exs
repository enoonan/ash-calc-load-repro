defmodule CalcRel.Repo.Migrations.InitialSchema do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:sites, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
    end

    create table(:scans, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:page_id, :uuid)
    end

    create table(:pages, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
    end

    alter table(:scans) do
      modify(
        :page_id,
        references(:pages, column: :id, name: "scans_page_id_fkey", type: :uuid, prefix: "public")
      )
    end

    alter table(:pages) do
      add(
        :site_id,
        references(:sites, column: :id, name: "pages_site_id_fkey", type: :uuid, prefix: "public")
      )
    end

    create table(:issues, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:state, :text)

      add(
        :scan_id,
        references(:scans,
          column: :id,
          name: "issues_scan_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end
  end

  def down do
    drop(constraint(:issues, "issues_scan_id_fkey"))

    drop(table(:issues))

    drop(constraint(:pages, "pages_site_id_fkey"))

    alter table(:pages) do
      remove(:site_id)
    end

    drop(constraint(:scans, "scans_page_id_fkey"))

    alter table(:scans) do
      modify(:page_id, :uuid)
    end

    drop(table(:pages))

    drop(table(:scans))

    drop(table(:sites))
  end
end
